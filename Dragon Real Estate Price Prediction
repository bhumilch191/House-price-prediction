#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd


# In[2]:


housing = pd.read_csv("data.csv")


# In[3]:


housing.head()


# In[4]:


# housing.info()


# In[5]:


# housing['CHAS'].value_counts()


# In[6]:


# housing.describe()


# In[7]:


get_ipython().run_line_magic('matplotlib', 'inline')


# In[8]:


import matplotlib.pyplot as plt
# housing.hist(bins=50, figsize=(20,15))


# ## Train test Splitting

# In[9]:


import numpy as np
# np.random.seed(42)
# def split_train_test(data, test_ratio):
#     np.random.seed(42)
#     shuffled = np.random.permutation(len(data))
#     print(shuffled)
#     test_set_size = int(len(data) * test_ratio)
#     test_indices =shuffled[:test_set_size]
#     train_indices = shuffled[test_set_size:]
#     return data.iloc[train_indices], data.iloc[test_indices]


# In[10]:


# train_set, test_set = split_train_test(housing, 0.2)


# In[11]:


# print(f"Rows in train set: {len(train_set)}\nRows in test set: {len(test_set)}")


# In[12]:


from sklearn.model_selection import train_test_split
train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)
print(f"Rows in train set: {len(train_set)}\nRows in test set: {len(test_set)}")


# In[13]:


from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing['CHAS']):
    strat_train_set=housing.loc[train_index]
    strat_test_set=housing.loc[test_index]


# In[14]:


strat_test_set['CHAS'].value_counts()


# In[15]:


strat_train_set['CHAS'].value_counts()


# In[16]:


# 95/7


# In[17]:


# 376/28


# In[18]:


housing=strat_train_set.copy()


# ## Looking for Correlations

# In[19]:


corr_matrix = housing.corr()
corr_matrix['MEDV'].sort_values(ascending=False)


# In[20]:


from pandas.plotting import scatter_matrix
# attributes = ["MEDV","RM","ZN", "LSTAT"]
# scatter_matrix(housing[attributes], figsize=(10,8))


# In[21]:


# housing.plot(kind="scatter", x="RM", y="MEDV", alpha=0.7)


# ## Trying Out Attribute Combinations

# In[22]:


housing["TAXRM"] = housing['TAX']/housing['RM']
housing.head()


# In[23]:


corr_matrix = housing.corr()
corr_matrix['MEDV'].sort_values(ascending=False)


# In[24]:


# housing.plot(kind="scatter", x="MEDV", y="TAXRM", alpha=0.5)


# In[25]:


housing.info()


# ## Missing Attributes

# In[26]:


housing = strat_train_set.drop('MEDV', axis=1)
housing_labels = strat_train_set['MEDV'].copy()


# <!--  To take care of missing attibutes, you have three options:
#      1. Get rid of the missing data points
#      2. Get rid of the whole attributes
#     3. Set the value to some value(0, mean or median) -->

# In[27]:


# Option 1
a = housing.dropna(subset=['RM']).shape
a
# Note that the original dataframe will remain unchanged


# In[28]:


# Option 2
housing.drop("RM", axis=1).shape
# Note that there is no RM column and also Note that the original dataframe will remain unchanged


# In[29]:


# Option 3
median = housing["RM"].median()
housing["RM"].fillna(median)
# Note that the original dataframe will remain unchanged


# In[30]:


housing.describe()


# In[31]:


from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy = "median")
imputer.fit(housing)


# In[32]:


imputer.statistics_


# In[33]:


x = imputer.transform(housing)


# In[34]:


housing_tr = pd.DataFrame(x, columns=housing.columns)


# In[35]:


housing_tr.describe()


# ## Creating a pipeline

# In[36]:


from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
my_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('std_scaller', StandardScaler()),
])


# In[37]:


my_pipeline
housing_num_tr = my_pipeline.fit_transform(housing)


# In[38]:


housing_num_tr.shape


# ## Selecting desire model for Dragon Real Estates.

# In[39]:


from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
# model = LinearRegression()
model = DecisionTreeRegressor()
# forest_red = RandomForestRegressor()
model.fit(housing_num_tr, housing_labels)


# In[40]:


some_data = housing.iloc[:10]
some_labels = housing_labels[:10]
prepared_data = my_pipeline.transform(some_data)
model.predict(prepared_data)


# In[41]:


list(some_labels)


# In[42]:


from sklearn.metrics import mean_squared_error
housing_predictions = model.predict(housing_num_tr)
mse = mean_squared_error(housing_labels, housing_predictions)
rmse = np.sqrt( mse)
rmse


# ## Using better evaiuation technique - Cross Validation

# In[43]:


# 1 2 3 4 5 6 7 8 9 10
from sklearn.model_selection import cross_val_score
scores = cross_val_score(model, housing_num_tr, housing_labels, scoring="neg_mean_squared_error",cv=10)
rmse_scores=np.sqrt(-scores)


# In[44]:


rmse_scores


# In[45]:


def print_scores(scores):
    print("Scorec: ",scores)
    print("Mean: ",scores.mean())
    print("Standerd deviation: ", scores.std())


# In[46]:


print_scores(rmse_scores)


# ## Saving a Model

# In[47]:


# from joblib import dump, load
# dump(model, 'Dragon.joblib')


# ## Testing the model on test data

# In[48]:


x_test = strat_test_set.drop("MEDV", axis=1)
y_test = strat_test_set["MEDV"].copy()
x_test_prepared = my_pipeline.transform(x_test)
final_predictions = model.predict(x_test_prepared)
final_mse = mean_squared_error(y_test, final_predictions)
final_rmse = np.sqrt(final_mse)
final_rmse


# In[49]:


print(final_predictions,list(y_test))


# In[50]:


from sklearn.model_selection import GridSearchCV
param_grid = [
    {'n_estimators':[3, 10, 30], 'max_features': [2, 4, 6, 8]},
    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features':[2, 3, 4]},
]

forest_red = RandomForestRegressor()
grid_search = GridSearchCV(forest_red, param_grid, cv=5,
                          scoring='neg_mean_squared_error',
                          return_train_score=True)
grid_search.fit(prepared_data, some_labels)


# In[51]:


grid_search.best_params_


# In[52]:


grid_search.best_estimator_


# In[53]:


cvres = grid_search.cv_results_


# In[54]:


for mean_score, params in zip(cvres['mean_test_score'],cvres['params']):
    print(np.sqrt(-mean_score),params)
